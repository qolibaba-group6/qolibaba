// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: routemap.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RoutemapService_CreateTerminal_FullMethodName = "/RoutemapService/CreateTerminal"
	RoutemapService_GetTerminal_FullMethodName    = "/RoutemapService/GetTerminal"
	RoutemapService_CreateRoute_FullMethodName    = "/RoutemapService/CreateRoute"
	RoutemapService_GetRoute_FullMethodName       = "/RoutemapService/GetRoute"
)

// RoutemapServiceClient is the client API for RoutemapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutemapServiceClient interface {
	CreateTerminal(ctx context.Context, in *TerminalCreateRequest, opts ...grpc.CallOption) (*TerminalCreateResponse, error)
	GetTerminal(ctx context.Context, in *TerminalGetByIDRequest, opts ...grpc.CallOption) (*Terminal, error)
	CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error)
	GetRoute(ctx context.Context, in *GetRouteByIDRequest, opts ...grpc.CallOption) (*Route, error)
}

type routemapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutemapServiceClient(cc grpc.ClientConnInterface) RoutemapServiceClient {
	return &routemapServiceClient{cc}
}

func (c *routemapServiceClient) CreateTerminal(ctx context.Context, in *TerminalCreateRequest, opts ...grpc.CallOption) (*TerminalCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminalCreateResponse)
	err := c.cc.Invoke(ctx, RoutemapService_CreateTerminal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routemapServiceClient) GetTerminal(ctx context.Context, in *TerminalGetByIDRequest, opts ...grpc.CallOption) (*Terminal, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Terminal)
	err := c.cc.Invoke(ctx, RoutemapService_GetTerminal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routemapServiceClient) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...grpc.CallOption) (*CreateRouteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRouteResponse)
	err := c.cc.Invoke(ctx, RoutemapService_CreateRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routemapServiceClient) GetRoute(ctx context.Context, in *GetRouteByIDRequest, opts ...grpc.CallOption) (*Route, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Route)
	err := c.cc.Invoke(ctx, RoutemapService_GetRoute_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutemapServiceServer is the server API for RoutemapService service.
// All implementations must embed UnimplementedRoutemapServiceServer
// for forward compatibility.
type RoutemapServiceServer interface {
	CreateTerminal(context.Context, *TerminalCreateRequest) (*TerminalCreateResponse, error)
	GetTerminal(context.Context, *TerminalGetByIDRequest) (*Terminal, error)
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error)
	GetRoute(context.Context, *GetRouteByIDRequest) (*Route, error)
	mustEmbedUnimplementedRoutemapServiceServer()
}

// UnimplementedRoutemapServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRoutemapServiceServer struct{}

func (UnimplementedRoutemapServiceServer) CreateTerminal(context.Context, *TerminalCreateRequest) (*TerminalCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTerminal not implemented")
}
func (UnimplementedRoutemapServiceServer) GetTerminal(context.Context, *TerminalGetByIDRequest) (*Terminal, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTerminal not implemented")
}
func (UnimplementedRoutemapServiceServer) CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoute not implemented")
}
func (UnimplementedRoutemapServiceServer) GetRoute(context.Context, *GetRouteByIDRequest) (*Route, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoute not implemented")
}
func (UnimplementedRoutemapServiceServer) mustEmbedUnimplementedRoutemapServiceServer() {}
func (UnimplementedRoutemapServiceServer) testEmbeddedByValue()                         {}

// UnsafeRoutemapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutemapServiceServer will
// result in compilation errors.
type UnsafeRoutemapServiceServer interface {
	mustEmbedUnimplementedRoutemapServiceServer()
}

func RegisterRoutemapServiceServer(s grpc.ServiceRegistrar, srv RoutemapServiceServer) {
	// If the following call pancis, it indicates UnimplementedRoutemapServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RoutemapService_ServiceDesc, srv)
}

func _RoutemapService_CreateTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutemapServiceServer).CreateTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutemapService_CreateTerminal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutemapServiceServer).CreateTerminal(ctx, req.(*TerminalCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutemapService_GetTerminal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminalGetByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutemapServiceServer).GetTerminal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutemapService_GetTerminal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutemapServiceServer).GetTerminal(ctx, req.(*TerminalGetByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutemapService_CreateRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutemapServiceServer).CreateRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutemapService_CreateRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutemapServiceServer).CreateRoute(ctx, req.(*CreateRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutemapService_GetRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouteByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutemapServiceServer).GetRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutemapService_GetRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutemapServiceServer).GetRoute(ctx, req.(*GetRouteByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutemapService_ServiceDesc is the grpc.ServiceDesc for RoutemapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutemapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RoutemapService",
	HandlerType: (*RoutemapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTerminal",
			Handler:    _RoutemapService_CreateTerminal_Handler,
		},
		{
			MethodName: "GetTerminal",
			Handler:    _RoutemapService_GetTerminal_Handler,
		},
		{
			MethodName: "CreateRoute",
			Handler:    _RoutemapService_CreateRoute_Handler,
		},
		{
			MethodName: "GetRoute",
			Handler:    _RoutemapService_GetRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "routemap.proto",
}
